<?php
	$listTableNames = $this->listTableNames();
 ?>
<section class="table-list">
	<div class="hide">
		<input type="hidden" name="urlGetField" value="<?php echo BASE_URL . $this->url('autoDb/default',[ 'action' => 'getListField']) ?>">
	</div>
	<div class="container">
		<div class="row col-md-3">
			<select class="list-table form-control">
				<option value="empty">---- List table ----</option>
				<?php
					if(!empty($listTableNames)){
						foreach($listTableNames as $table){
							echo "<option value='" . strtolower($table) ."'>" . $table . "</option>";
						}
					}
				?>
			</select>
		</div>
		<div class="col-md-2">
			<button type="button"  class="add-table btn btn-info form-control">Add</button>
		</div>
	</div>
</section>

<section class="field-list" style="display: none">
	<h3 class="display-name-table">[filters] Table</h3>
	<table class="table">
		<thead>
			<tr>
				<th>
					<input type="checkbox" id="selectall" name="all">
				</th>
				<th>Field</th>
				<th>Type</th>
			</tr>
		</thead>
		<tbody class="display-field"></tbody>
	</table>

	<div class="row">
		<div class="col-md-4">
			<button class="btn-display-select btn btn-info btn-sm" type="button">SELECT</button>
			<button class="btn-display-insert btn btn-info btn-sm" type="button">INSERT</button>
			<button class="btn-display-update btn btn-info btn-sm" type="button">UPDATE</button>
			<button class="btn-display-delete btn btn-info btn-sm" type="button">DELETE</button>
		</div>
		<div class="col-md-8">
			<div class="row">
				<div class="col-md-3">
					<select class="conditional-name form-control">
						<option value="where=">Where =</option>
						<option value="where!=">Where !=</option>
						<option value="wherein">Where In</option>
						<option value="wherenotin">Where Not in</option>
						<option value="wherebetween">Where Between</option>
						<option value="wherenotbetween">Where Not between</option>
						<option value="where>">Where ></option>
						<option value="where>=">Where >=</option>
						<option value="where<">Where <</option>
						<option value="where<=">Where <=</option>
						<option value="wherelike">Where Like</option>
						<option value="wherenotlike">Where Not like</option>
					</select>
				</div>
				<div class="col-md-5">
					<input id="autocomplete-field" placeholder="id,1" class="form-control conditional-value"></input>
				</div>
				<button class="btn-add-chain btn btn-info btn-sm" type="button">ADD CHAIN</button>
				<button class="btn-add-new btn btn-info btn-sm" type="button">ADD NEW</button>
						</div>
			</div>
	</div>
</section>

<section class="display-sql code2">

</section>
<script type="text/javascript">
	;(function($, window, document, undefined){
	"use strict";

	$(document).ready(function(){
		(function(){
			var btnAddTable        = $('.add-table');
			var listTable          = $('.list-table');
			var btnDisplaySelect   = $('.btn-display-select');
			var btnDisplayInsert   = $('.btn-display-insert');
			var btnDisplayUpdate   = $('.btn-display-update');
			var btnDisplayDelete   = $('.btn-display-delete');
			var btnDisplayCustom   = $('.btn-display-custom');
			var btnAddChain        = $('.btn-add-chain');
			var sltConditionalName = $('.conditional-name');
			var stringWhere        = '';
			var flagWhere          = '';
			var space              = '';

			sltConditionalName.on('change',function(){
				switch ($(this).val()) {
					case "whereliteral":
						$("#autocomplete-field").attr("placeholder","id = 1");
						break;
					case "wherein":
					case "wherenotin":
						$("#autocomplete-field").attr("placeholder","id,1,2,3,4");
						break;
					case "wherebetween":
					case "wherenotbetween":
						$("#autocomplete-field").attr("placeholder","id,1,9");
						break;
					case "wherelike":
					case "wherenotlike":
						$("#autocomplete-field").attr("placeholder","id,'%jav%'");
						break;
					default:
					$("#autocomplete-field").attr("placeholder","id,1");
				}
			})


			btnAddTable.on('click',function(){//handle for ADD TABLE
				if(listTable.val() !== ''){
					getListField(listTable.val());//ajax to create template table list Field
				}
			})//end

			btnDisplaySelect.on('click',function(){//hande for SELECT
					var listNameChecked = getListNameChecked();
					var stringSql       = createStringSql(listNameChecked,"select");
					if(stringWhere !== '' && flagWhere !== ''){
						stringWhere = '';
						flagWhere   = '';
					}
					$(".display-sql").html(stringSql);
			})//end

			btnDisplayInsert.on('click',function(){//hande for INSERT
					var listNameChecked = getListNameChecked();
					var stringSql       = createStringSql(listNameChecked,"insert");

					$(".display-sql").html(stringSql);
			})//end

			btnDisplayUpdate.on('click',function(){//hande for UPDATE
					var listNameChecked = getListNameChecked();
					var stringSql       = createStringSql(listNameChecked,"update");
					if(stringWhere !== ''){
						stringWhere = '';
					}
					$(".display-sql").html(stringSql);
			})//end

			btnDisplayDelete.on('click',function(){//hande for DELETE
					var listNameChecked = getListNameChecked();
					var stringSql       = createStringSql(listNameChecked,"delete");
					if(stringWhere !== ''){
						stringWhere = '';
					}
					$(".display-sql").html(stringSql);
			})//end

			btnAddChain.on('click',function(){//handle for ADD CHAIN
				var conName     = $(".conditional-name").val();
				var conValue    = $(".conditional-value").val();
				if(conName !== '' && conValue !== ''){
					if(flagWhere === ''){// first time assign '->where'
						var charWhere = '->where';
						space         = 17;
						flagWhere     = 'notNull';
					}else{// not first time will not '->where'
						var charWhere = '';
						space         = 24;
					}//end

					if(conName === "where="){//handle with WHERE = statement
						conValue  = convertToQuotes(conValue);
						stringWhere += "<br/>" + rPt(space) + mP(charWhere + "->equalTo(") + conValue + mP(")");
					}//end
					if(conName === "whereliteral"){//handle with WHERE = statement
						conValue  = convertToQuotes(conValue);
						stringWhere += "<br/>" + rPt(space) + mP(charWhere + "->literal(") + conValue + mP(")");
					}//end
					if(conName === "where!="){//handle with WHERE != statement
						conValue  = convertToQuotes(conValue);
						stringWhere += "<br/>" + rPt(space) + mP(charWhere + "->notEqualTo(") + conValue + mP(")");
					}//end
					if(conName === "wherein"){//handle with WHERE IN statement
						conValue  = convertToQuotes(conValue,"in");
						stringWhere += "<br/>" + rPt(space) + mP(charWhere + "->in(") + conValue + mP(")");
					}//end
					if(conName === "wherenotin"){//handle with WHERE NOT IN statement
						conValue  = convertToQuotes(conValue,"in");
						stringWhere += "<br/>" + rPt(space) + mP(charWhere + "->notIn(") + conValue + mP(")");
					}//end
					if(conName === "wherebetween"){//handle with WHERE BETWEEN statement
						conValue  = convertToQuotes(conValue);
						stringWhere += "<br/>" + rPt(space) + mP(charWhere + "->between(") + conValue + mP(")");
					}//end
					if(conName === "wherenotbetween"){//handle with WHERE NOT BETWEEN statement
						conValue  = convertToQuotes(conValue);
						stringWhere += "<br/>" + rPt(space) + mP(charWhere + "->notBetween(") + conValue + mP(")");
					}//end
					if(conName === "wherelike"){//handle with WHERE LIKE statement
						conValue  = convertToQuotes(conValue);
						stringWhere += "<br/>" + rPt(space) + mP(charWhere + "->like(") + conValue + mP(")");
					}//end
					if(conName === "wherenotlike"){//handle with WHERE NOT LIKE statement
						conValue  = convertToQuotes(conValue);
						stringWhere += "<br/>" + rPt(space) + mP(charWhere + "->notLike(") + conValue + mP(")");
					}//end
					if(conName === "where>"){//handle with WHERE GREATER THAN statement
						conValue  = convertToQuotes(conValue);
						stringWhere += "<br/>" + rPt(space) + mP(charWhere + "->greaterThan(") + conValue + mP(")");
					}//end
					if(conName === "where<"){//handle with WHERE LESS THAN statement
						conValue  = convertToQuotes(conValue);
						stringWhere += "<br/>" + rPt(space) + mP(charWhere + "->lessThan(") + conValue + mP(")");
					}//end
					if(conName === "where<="){//handle with WHERE LESS THAN OR EQUAL TO statement
						conValue  = convertToQuotes(conValue);
						stringWhere += "<br/>" + rPt(space) + mP(charWhere + "->lessThanOrEqualTo(") + conValue + mP(")");
					}//end
					if(conName === "where>="){//handle with WHERE GREATER THAN OR EQUAL statement
						conValue  = convertToQuotes(conValue);
						stringWhere += "<br/>" + rPt(space) + mP(charWhere + "->greaterThanOrEqualTo(") + conValue + mP(")");
					}//end

					$(".conditional-area").html(stringWhere);
				}
			})//end

		})();

		var createStringSql = function(listName = '',type = 'select'){
			listName = (listName.length === 0)? '' :  mK("array") + mP("(") + listName.join(",") + mP(")");
			var html = '';

			switch(type){
				case "insert":
					html = mK("public function") + mP(" addItem(") + mV("$data") + mP(" = ") + "null" + mP(",") + mV("$options") + mP(" = ") + "null" + mP("\)\{") + "<br/>";
						html += rPt() + mV("$this") + mP("->_tableGateway->insert(") + mV("$data") + mP(")") + mP(";") + "<br/>";
						html += rPt() + mK("return ") + mV("$result") + mP(";") + "<br/>";
					html += mP("}") + "<br/>";
					break;
				case "update":
					html = mK("public function") + mP(" updateItem(") + mV("$data") + mP(" = ") + "null" + mP(",") + mV("$options") + mP(" = ") + "null" + mP("\)\{") + "<br/>";
						html += rPt() + mV("$this") + mP("->_tableGateway->update(") + mV("$data") + mP(")") + mP(";") + "<br/>";
						html += rPt() + mK("return ") + mV("$result") + mP(";") + "<br/>";
					html += mP("}") + "<br/>";
					break;
				case "delete":
					html = mK("public function") + mP(" deleteItem(") + mV("$data") + mP(" = ") + "null" + mP(",") + mV("$options") + mP(" = ") + "null" + mP("\)\{") + "<br/>";
						html += rPt() + mV("$this") + mP("->_tableGateway->delete(") + mV("$data") + mP(")") + mP(";") + "<br/>";
						html += rPt() + mK("return ") + mV("$result") + mP(";") + "<br/>";
					html += mP("}") + "<br/>";
					break;
				default :
					html = mK("public function") + mP(" listItem(") + mV("$data") + mP(" = ") + "null" + mP(",") + mV("$options") + mP(" = ") + "null" + mP("\)\{") + "<br/>";
						html += rPt() + mV("$result") + mP(" = ") + mV("$this") + mP("->_tableGateway->select(") + mK("function") + mP("(") + mK("Select ") + mV("$select") + mP(")") + mK("use") + mP("(") + mV("$data") + mP(")") + mP("{") + "<br/>";
							html += rPt(10) + mV("$select") + mP("->columns(") + listName + mP(")") + "<span class='conditional-area'></span>" + mP(";") + "<br/>";
						html += rPt() + mP("})->toArray();") + "<br/>";
						html += rPt() + mK("return ") + mV("$result") + mP(";") + "<br/>";
					html += mP("}") + "<br/>";
			}

			return "<code>" + html + "</code>";
		}//end createStringSql

		var notEasyAutoComplete = function(listTable){
			$( "#autocomplete-field" ).autocomplete({
				source: listTable
			});
		}//end notEasyAutoComplete

		var resetWhere = function(stringWhere,charWhere){
			if(stringWhere !== '' && charWhere !== ''){
				stringWhere = '';
				charWhere   = '';
			}
		}//end resetWhere



		var getListNameChecked = function(){
			var tmpListNameChecked = [];
			$('input[name|="check"]').each(function(val){
					if($(this).is(":checked")){
						var name = $(this).attr('name');
						name     = name.replace("check-","");
						tmpListNameChecked.push("'" + name + "'");
					}
			})
			return tmpListNameChecked;
		}//end getListNameChecked

		var getListField = function(nameTable = ''){
			$.ajax({
				url      : $("[name =urlGetField]").val(),
				type     : "POST",
				dataType : 'json',
				data : {
					action    : "view",
					nameTable : nameTable
				},
				success : function(data){
					if(data.listFieldNames !== ''){
						var listField = data.listFieldNames;
						var html = '';

						$(".field-list").show();

						$(".display-name-table").html('<h3>[' + nameTable + '] Table</h3>')

						for (var key in listField) {
							if (listField.hasOwnProperty(key)) {
								html += '<tr>' +
													'<th scope="row"><input type="checkbox"  class="second" name="check-'+ key +'"></th>' +
													'<td>'+ key +'</td>' +
													'<td>'+ listField[key] +'</td>' +
												'</tr>' ;
							}
						}

						$(".display-field").html(html);
						notEasyAutoComplete(data.listFieldLiteral);

						/** FUCTION */
						checkAll();
					}
				}
			})
		}//end getListField

		var checkAll = function(){
			$(".second").on('click',function() {
					$("#selectall").prop("checked", false);
			});

			$("#selectall").on('click',function() {
					$(".second").prop("checked", $("#selectall").prop("checked"));
			})
		}// end checkAll

		/*************************************
		 * Utilities
		 *************************************/
		var mK = function(text = ''){
			if(text !== ''){
				return "<span class='php-keyword'>" + text +"</span>";
			}
		}

		var mV = function(text = ''){
			if(text !== ''){
				return "<span class='php-variable'>" + text +"</span>";
			}
		}

		var mP = function(text = ''){
			if(text !== ''){
				return "<span class='php-plain'>" + text +"</span>";
			}
		}

		var mC = function(text = ''){
			if(text !== ''){
				return "<span class='php-comment'>" + text +"</span>";
			}
		}

		var rPt = function(step = 5){
			return "&nbsp;".repeat(step);
		}

		var convertToQuotes = function(string,style = 'normal'){
			var newString = [];
			string        = string.split(",");
			newString.push('"' + string[0] + '"');

			string.shift()
			if(style === 'in'){// handle for IN and NOT IN predicate
				string = string.join(",");
				newString.push(mP("array(") + string + mP(")"));
			}

			if(style === 'normal'){
				newString.push(string);
			}

			// if(style === 'between'){// handle for BETWEEN and NOT BETWEEN predicate
			// 	string      = string.shift().join(",");
			// 	newString[] = mP("array(") + string + mP(")");
			// }
			return newString.join(",");
		}
		/**************************************/

	});

})(jQuery, window, document);

</script>
